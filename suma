const express = require("express");
const app = express();
const dotenv = require("dotenv");
const fetch = require("node-fetch");

const db = require("./src/config/database");

dotenv.config();

const GOOGLE_ACCESS_TOKEN_URL = process.env.GOOGLE_ACCESS_TOKEN_URL;

const PORT = process.env.PORT || 3000;

const blog = require("./src/routes/blogRoutes");

app.use("/api/v1", blog);

// app.get("/google/callback", async (req, res) => {
//   res.send("Google OAuth Callback Url!");
// });

const GOOGLE_OAUTH_URL = process.env.GOOGLE_OAUTH_URL;

const GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID;

const GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;

const GOOGLE_CALLBACK_URL = "http%3A//localhost:3000/google/callback";

const GOOGLE_OAUTH_SCOPES = [
  "https%3A//www.googleapis.com/auth/userinfo.email",

  "https%3A//www.googleapis.com/auth/userinfo.profile",
];

app.get("/", async (req, res) => {
  const state = "some_state";
  const scopes = GOOGLE_OAUTH_SCOPES.join(" ");
  const GOOGLE_OAUTH_CONSENT_SCREEN_URL = `${GOOGLE_OAUTH_URL}?client_id=${GOOGLE_CLIENT_ID}&redirect_uri=${GOOGLE_CALLBACK_URL}&access_type=offline&response_type=code&state=${state}&scope=${scopes}`;
  res.redirect(GOOGLE_OAUTH_CONSENT_SCREEN_URL);
});

app.get("/users2", db.getUsers);

app.get("/google/callback", async (req, res) => {
  console.log(req.query);

  const { code } = req.query;

  const data = {
    code,

    client_id: GOOGLE_CLIENT_ID,

    client_secret: GOOGLE_CLIENT_SECRET,

    redirect_uri: "http://localhost:3000/google/callback",

    grant_type: "authorization_code",
  };

  console.log(data);

  // exchange authorization code for access token & id_token

  const response = await fetch(GOOGLE_ACCESS_TOKEN_URL, {
    method: "POST",

    body: JSON.stringify(data),
  });

  const access_token_data = await response.json();
  const { id_token } = access_token_data;

  console.log(id_token);

  // verify and extract the information in the id token

  const token_info_response = await fetch(
    `${process.env.GOOGLE_TOKEN_INFO_URL}?id_token=${id_token}`
  );
  res.status(token_info_response.status).json(await token_info_response.json());

  //   const { email, name } = token_info_data;
});

// loho jwt

const jwt = require("jsonwebtoken");

const validateRequest = (requiredRole) => {
  console.log("aaaa");
  return (req, res, next) => {
    const { authorization } = req.headers;
    console.log("asuthh is", authorization);
    const token = authorization.substring("Bearer ".length);
    //   try {
    const { exp, iss, role } = jwt.verify(token, "tokenSecret");
    console.log("ppppppp");

    console.log(exp, iss, role);
    next();
    return;
  };
  //   return (req, res, next) => {
  //     const { authorization } = req.headers;
  //     const token = authorization.substring("Bearer ".length);
  //     try {
  //       const { exp, iss, role } = jwt.verify(token, "tokenSecret");
  //       console.log("ppppppp");

  //       console.log(exp, iss, role);

  //       //   if (iss === "my-api" && exp < Date.now() && role === requiredRole) {
  //       //     next();
  //       //     return;
  //       //   }
  //     } catch (err) {
  //       res.sendStatus(401);
  //       return;
  //     }
  //   };
};

app.post("/login", (req, res) => {
  //   const { username, password } = req.body;
  //   const user = users.find((user) => user.username === username);

  //   if (!user || user.password !== password) {
  //     res.status(400);
  //     res.send({ message: "Invalid username or password" });
  //     return;
  //   }

  if ("aa" === "aa") {
    const token = jwt.sign(
      {
        role: "testrole",
      },
      "tokenSecret",
      {
        algorithm: "HS256",
        expiresIn: "50m",
        issuer: "my-api",
        subject: "123",
      }
    );
    res.send({ token });
    return;
  }
});

app.get("/users", validateRequest("admin"), (req, res) => {
  res.send(JSON.stringify({ users }));
});

// add the function to let only admin access it
app.get("/users/:userId", validateRequest("admin"), (req, res) => {
  //   const { params } = req;
  //   const { userId } = params;

  console.log("uyguguygyug");
  const user = users.find((user) => user.id === userId);

  if (!user) {
    res.sendStatus(404);
    return;
  }
  res.send({ user });
});

app.listen(PORT, () => {
  console.log("Server running on port 3000");
});
